name: CI

on:
  push:
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: "0 2 * * *"

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      schemas: ${{ steps.filter.outputs.schemas }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: "Filter changed paths"
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            frontend:
              - 'frontend/**'
            schemas:
              - 'schema/**'

  rust-tests:
    name: "Rust tests (no python)"
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
      - name: "Rust toolchain"
        uses: dtolnay/rust-toolchain@stable
      - name: "Cargo test (pure Rust; no default features)"
        working-directory: core
        run: cargo test --no-default-features --verbose

  py-tests:
    name: "Python bindings + pytest"
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Setup Python"
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: "Rust toolchain"
        uses: dtolnay/rust-toolchain@stable

      # Peker PyO3 mot korrekt Python
      - name: "Export PYO3_PYTHON"
        shell: bash
        run: echo "PYO3_PYTHON=$(python -c 'import sys; print(sys.executable)')" >> "$GITHUB_ENV"

      # Opprett og aktiver venv (for maturin develop)
      - name: "Create and activate venv"
        shell: bash
        run: |
          python -m venv .venv
          echo "VIRTUAL_ENV=$GITHUB_WORKSPACE/.venv" >> "$GITHUB_ENV"
          echo "$GITHUB_WORKSPACE/.venv/bin" >> "$GITHUB_PATH"
          python -c "import sys; print('Using Python:', sys.executable)"

      # Installer avhengigheter
      - name: "Install Python deps (in venv)"
        shell: bash
        run: |
          python -m pip install -U pip
          pip install maturin pytest
          # Hvis prosjektet har requirements-filer, bruk dem
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          # Baseline (hvis requirements ikke dekker alt)
          pip install --exists-action=i \
            click \
            "fastapi>=0.110" \
            "fastapi[testclient]" \
            pydantic \
            httpx \
            requests \
            python-dotenv

      # Test-fixtures
      - name: "Provide test tokens/state"
        run: |
          cp cli/tokens_example.py cli/tokens.py
          mkdir -p state
          cp state/last_import.sample.json state/last_import.json || echo "{}" > state/last_import.json

      # Sanitér miljø
      - name: "Sanitize env on Linux (unset LD_LIBRARY_PATH & CARGO_TARGET_DIR)"
        if: runner.os == 'Linux'
        shell: bash
        run: |
          unset CARGO_TARGET_DIR || true
          unset LD_LIBRARY_PATH || true
          echo "LD_LIBRARY_PATH=" >> "$GITHUB_ENV"

      - name: "Sanity - show core tree and Cargo.toml"
        run: |
          pwd
          ls -la
          ls -la core
          test -f core/Cargo.toml && echo "Found core/Cargo.toml"

      # Bygg & installer PyO3-modulen
      - name: "Build & install Python module with maturin (feature=python)"
        working-directory: core
        run: maturin develop --features python

      - name: "Verify Python import"
        run: |
          python -c "import cyclegraph_core as cg; print('OK import:', hasattr(cg, 'compute_power_with_wind'))"

      # Sørg for at imports som 'cli', 'cyclegraph' etc. finner repo-roten
      - name: "Export PYTHONPATH"
        shell: bash
        run: echo "PYTHONPATH=$GITHUB_WORKSPACE" >> "$GITHUB_ENV"

      - name: "pytest"
        run: pytest -q

  full:
    name: "Full pipeline (wheel + rust + frontend + schemas)"
    needs: changes
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'schedule' ||
      github.event_name == 'workflow_dispatch' ||
      github.ref == 'refs/heads/main' ||
      needs.changes.outputs.frontend == 'true' ||
      needs.changes.outputs.schemas == 'true'
    env:
      RUSTFLAGS: "-C codegen-units=8"
      CARGO_TERM_COLOR: always
      PYTHONUNBUFFERED: "1"
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "Setup Python"
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: "Rust toolchain"
        uses: dtolnay/rust-toolchain@stable

      - name: "Cache Cargo registry, git, and target"
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            core/target
          key: cargo-${{ runner.os }}-${{ hashFiles('core/Cargo.lock') }}
          restore-keys: |
            cargo-${{ runner.os }}-

      - name: "Install Python deps"
        run: |
          python -m pip install -U pip
          python -m pip install -U maturin pytest requests python-dotenv click

      - name: "Provide test tokens/state"
        run: |
          cp cli/tokens_example.py cli/tokens.py
          mkdir -p state
          cp state/last_import.sample.json state/last_import.json || echo "{}" > state/last_import.json

      - name: "Sanitize env on Linux (unset LD_LIBRARY_PATH & CARGO_TARGET_DIR)"
        if: runner.os == 'Linux'
        shell: bash
        run: |
          unset CARGO_TARGET_DIR || true
          unset LD_LIBRARY_PATH || true
          echo "LD_LIBRARY_PATH=" >> "$GITHUB_ENV"
          echo "After sanitize:"
          env | sort | grep -E 'CARGO_TARGET_DIR|LD_LIBRARY_PATH' || true

      - name: "Build Rust wheel"
        working-directory: core
        env:
          LD_LIBRARY_PATH: ""
        run: |
          echo "Effective LD_LIBRARY_PATH='${LD_LIBRARY_PATH:-<empty>}'"
          echo "CARGO_TARGET_DIR should be unset → '${CARGO_TARGET_DIR-<unset>}'"
          maturin build --release -i python3.12 --features python

      - name: "Install latest-built wheel"
        run: |
          WHEEL=$(ls -t core/target/wheels/*.whl | head -n 1)
          python -m pip install "$WHEEL"
          python -c "import cyclegraph_core, inspect; print('cyclegraph_core OK:', getattr(cyclegraph_core,'__file__','<pkg>'))"

      - name: "Run Rust unit tests (lib)"
        working-directory: core
        run: cargo test --lib --no-default-features -- --nocapture

      - name: "Run golden test (self-heal on fail)"
        working-directory: core
        env:
          CG_GOLDEN_DEBUG: "1"
        run: |
          set -e
          if cargo test --lib --no-default-features golden_sessions_match_with_tolerance -- --nocapture; then
            echo "Golden test OK"
          else
            echo "Golden FAIL → regen expected"
            CG_UPDATE_GOLDEN=1 cargo test --lib --no-default-features golden_sessions_match_with_tolerance -- --nocapture || true
            cargo test --lib --no-default-features golden_sessions_match_with_tolerance -- --nocapture
          fi

      - name: "Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "frontend/package-lock.json"

      - name: "Frontend – install deps (retry)"
        if: hashFiles('frontend/package.json') != ''
        working-directory: frontend
        shell: bash
        run: |
          npm config set fetch-retries 5
          npm config set fetch-retry-maxtimeout 120000
          for i in 1 2 3; do
            echo "npm ci attempt $i/3"
            npm ci && break || (echo "npm ci failed (attempt $i), sleeping…"; sleep 10)
          done

      - name: "Frontend – typecheck"
        if: hashFiles('frontend/package.json') != ''
        working-directory: frontend
        run: npm run typecheck

      - name: "Frontend – build"
        if: hashFiles('frontend/package.json') != ''
        working-directory: frontend
        run: npm run build

      - name: "Frontend – tests (vitest)"
        if: hashFiles('frontend/package.json') != ''
        working-directory: frontend
        run: npm run test -- --run

      - name: "JSON Schemas – compile (AJV)"
        if: hashFiles('schema/*.json') != ''
        working-directory: frontend
        run: |
          npx --yes ajv-cli@5 compile \
            -c ./scripts/ajv.config.cjs \
            -s ../schema/session_metrics.v1.json \
            -s ../schema/daily_user_metrics.v1.json \
            -s ../schema/trends_response.v1.json
