name: CI

on:
  push:
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: "0 2 * * *"

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      schemas: ${{ steps.filter.outputs.schemas }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            frontend:
              - 'frontend/**'
            schemas:
              - 'schema/**'

  core:
    needs: changes
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: "-C codegen-units=8"
      CARGO_TERM_COLOR: always
      PYTHONUNBUFFERED: "1"
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo registry, git, and target
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            core/target
          key: cargo-${{ runner.os }}-${{ hashFiles('core/Cargo.lock') }}
          restore-keys: |
            cargo-${{ runner.os }}-

      - name: Install Python deps
        run: |
          python -m pip install -U pip
          pip install -U maturin pytest requests python-dotenv

      - name: Provide test tokens/state
        run: |
          cp cli/tokens_example.py cli/tokens.py
          mkdir -p state
          cp state/last_import.sample.json state/last_import.json || echo "{}" > state/last_import.json

      - name: Sanitize Linux env (unset LD_LIBRARY_PATH)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          unset LD_LIBRARY_PATH || true
          echo "LD_LIBRARY_PATH cleared -> ${LD_LIBRARY_PATH:-<empty>}"

      - name: Build Rust wheel
        working-directory: core
        env:
          LD_LIBRARY_PATH: ""   # ← hard reset for dette steget
        run: maturin build --release -i python3.12 --features python

      - name: Install latest-built wheel
        run: |
          WHEEL=$(ls -t core/target/wheels/*.whl | head -n 1)
          pip install "$WHEEL"
          python -c "import cyclegraph_core; print('cyclegraph_core imported OK')"

      - name: Run Rust unit tests (lib)
        working-directory: core
        run: cargo test --lib -- --nocapture

      - name: Run golden test (self-heal on fail)
        working-directory: core
        env:
          CG_GOLDEN_DEBUG: "1"
        run: |
          set -e
          if cargo test --lib golden_sessions_match_with_tolerance -- --nocapture; then
            echo "Golden test OK"
          else
            echo "Golden FAIL → regen expected"
            CG_UPDATE_GOLDEN=1 cargo test --lib golden_sessions_match_with_tolerance -- --nocapture || true
            cargo test --lib golden_sessions_match_with_tolerance -- --nocapture
          fi

      - name: Run Python CLI tests (if present)
        run: |
          set -e
          pytest -k "physics_cli" --ignore=cli/test_fetch.py || {
            code=$?
            if [ $code -eq 5 ]; then
              echo "No matching tests – skipping."
              exit 0
            else
              exit $code
            fi
          }

  full:
    needs: changes
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'schedule' ||
      github.event_name == 'workflow_dispatch' ||
      github.ref == 'refs/heads/main' ||
      needs.changes.outputs.frontend == 'true' ||
      needs.changes.outputs.schemas == 'true'
    env:
      RUSTFLAGS: "-C codegen-units=8"
      CARGO_TERM_COLOR: always
      PYTHONUNBUFFERED: "1"
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo registry, git, and target
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            core/target
          key: cargo-${{ runner.os }}-${{ hashFiles('core/Cargo.lock') }}
          restore-keys: |
            cargo-${{ runner.os }}-

      - name: Install Python deps
        run: |
          python -m pip install -U pip
          pip install -U maturin pytest requests python-dotenv

      - name: Provide test tokens/state
        run: |
          cp cli/tokens_example.py cli/tokens.py
          mkdir -p state
          cp state/last_import.sample.json state/last_import.json || echo "{}" > state/last_import.json

      - name: Sanitize Linux env (unset LD_LIBRARY_PATH)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          unset LD_LIBRARY_PATH || true
          echo "LD_LIBRARY_PATH cleared -> ${LD_LIBRARY_PATH:-<empty>}"

      - name: Build Rust wheel
        working-directory: core
        env:
          LD_LIBRARY_PATH: ""   # ← hard reset også her
        run: maturin build --release -i python3.12 --features python

      - name: Install latest-built wheel
        run: |
          WHEEL=$(ls -t core/target/wheels/*.whl | head -n 1)
          pip install "$WHEEL"
          python -c "import cyclegraph_core; print('cyclegraph_core imported OK')"

      - name: Run Rust unit tests (lib)
        working-directory: core
        run: cargo test --lib -- --nocapture

      - name: Run golden test (self-heal on fail)
        working-directory: core
        env:
          CG_GOLDEN_DEBUG: "1"
        run: |
          set -e
          if cargo test --lib golden_sessions_match_with_tolerance -- --nocapture; then
            echo "Golden test OK"
          else
            echo "Golden FAIL → regen expected"
            CG_UPDATE_GOLDEN=1 cargo test --lib golden_sessions_match_with_tolerance -- --nocapture || true
            cargo test --lib golden_sessions_match_with_tolerance -- --nocapture
          fi

      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "frontend/package-lock.json"

      - name: Frontend – install deps (retry)
        if: hashFiles('frontend/package.json') != ''
        working-directory: frontend
        shell: bash
        run: |
          npm config set fetch-retries 5
          npm config set fetch-retry-maxtimeout 120000
          for i in 1 2 3; do
            echo "npm ci attempt $i/3"
            npm ci && break || (echo "npm ci failed (attempt $i), sleeping…" && sleep 10)
          done

      - name: Frontend – typecheck
        if: hashFiles('frontend/package.json') != ''
        working-directory: frontend
        run: npm run typecheck

      - name: Frontend – build
        if: hashFiles('frontend/package.json') != ''
        working-directory: frontend
        run: npm run build

      - name: Frontend – tests (vitest)
        if: hashFiles('frontend/package.json') != ''
        working-directory: frontend
        run: npm run test -- --run

      - name: JSON Schemas – compile (AJV)
        if: hashFiles('schema/*.json') != ''
        working-directory: frontend
        run: |
          npx --yes ajv-cli@5 compile \
            -c ./scripts/ajv.config.cjs \
            -s ../schema/session_metrics.v1.json \
            -s ../schema/daily_user_metrics.v1.json \
            -s ../schema/trends_response.v1.json
