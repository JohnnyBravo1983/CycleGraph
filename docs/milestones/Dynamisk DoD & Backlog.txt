Definition of Done — Frontlog

Samlet oversikt over hva som er ferdig, påbegynt og planlagt. Ikke-sensitive, høynivå punkter.
Sist oppdatert: 2025-09-25

✅ FERDIG
M1 — Prosjektstruktur & repo
Standard repo-oppsett: core/, cli/, docs/, data/, shapes/, tests/.
Init GitHub-repo (README, lisens, .gitignore).
Bygg/kjørbare grunnkommandoer dokumentert i README (Rust/Python).
CI eller lokal “quick check”: cargo check og enkel Python-kall fungerer.

M2 — Rust-core med PyO3
Cargo.toml satt opp med PyO3 av riktig versjon.
Minst én eksponert Rust-funksjon bundet til Python (importerbar i Python).
cargo test (grunnleggende) og “import i Python” fungerer lokalt.
Kodekommentarer: hvor core-API lever og hvordan bygge.

M3 — CLI-oppsett & dataflyt
cli/analyze.py kjører ende-til-ende mot core (Rust) med argparse-flagg.
I/O-kontrakt: leser CSV/streams, skriver rapport/JSON til output/.
Grunnleggende feilhåndtering (fil mangler, feil format) med tydelige feilmeldinger.
“Happy path” demonstrert på sample data.

M4 — Dummydata & testkjøring
Dummy/samples tilgjengelig i repo (ikke sensitive).
Kjøreeksempel dokumentert: python -m cli.analyze … produserer forutsigbar rapport.
Sanity-sjekk: verdier i rapport er konsistente og uten exceptions.
Enkle tester/skript verifiserer flyten.

M5 — SHACL-validering
SHACL-shapes for RDF definert i shapes/.
Valideringsscript i Python: kjørbar via CLI-flag eller separat kommando.
Eksempelfiler validerer OK; feil rapporteres forståelig.
Kort bruksdokumentasjon i docs/ (hva, hvordan, hvor output havner).

M6 — Strava-integrasjon (API & import)
OAuth-flyt verifisert; tokens lagres sikkert lokalt (ingen hemmeligheter i repo).
Henting av aktiviteter med paging og tidsfilter (--since) fungerer.
Streams → CSV (minst time,hr,watts), robust håndtering av 401/403/429/5xx.
Inkrementell state (ingen duplikater), og grunnlogg over kjøringer.
End-to-end “import → analyze” fungerer på ≥3 reelle økter (lokalt verifisert).

M7 — Analysefunksjoner (effektivitet, treningsscore)
CGS v1 etablert: IF/NP/VI/Pa:Hr/WpB + 28d baseline (±25 %), tydelige fallbacks.
Badges: Big Engine (+6 %, ≥30 min) og Metronome (VI≤1.05, Pa:Hr≤1.05).
Python: Strava publish-formatter m/ språk, trimming og fallbacks + tester grønne.
Rust: unit + golden + perf-guard (2h@1Hz ≤200 ms) grønne.
Strava-klient: auto-refresh, header-fix, comment→description-fallback, verifisert live.
Docs: CGS_v1, CLI usage, Strava publish oppdatert.

M7.5 — Backend-forfining (CGS v1.1, explain)
Systemtest grønn på steg 0–7: PyO3-import, CLI-hjelp, E2E med sample, idempotens, feilhåndtering, Rust/golden, perf-smoke (~0.73s).
SHACL- og Strava-mock-test kan hoppes når ingen .ttl eller mock-data er tilgjengelig.
Fikser gjort: ryddet cmd_session, fikset continue-feil, lagt til mod metrics; i lib.rs (løste E0432), output verifisert deterministisk.

M7.5 — Forebyggende tester
Pytest: _analyze_session_bridge() kaster ValueError ved tomme arrays.
Rust golden-test for w_per_beat() med edge-case input (NaN/null/mismatch).
Branch: feature/m7.5-preventive-tests
Tester grønne: pytest + cargo test (inkl. golden).
Observasjoner: w_per_beat() håndterer NaN/mismatch robust; logging/Result kan vurderes senere.

M7.5 — GitHub Actions (basic CI)
Minimal workflow satt opp: kjører pytest -q og cargo test --tests -q på push/PR.
Branch: feature/m7.5-ci-basic
Tester grønne: workflow verifisert OK på GitHub.
Observasjon: base klar for utvidelse med systemtest senere.

M7.6 — Strava Fetch & Modusdeteksjon (S1)
Auto-modus basert på trainer, sport_type og device_watts.
CLI-flag --mode roller|outdoor som overstyrer auto.
JSON-output rutes til riktig pipeline (indoor/outdoor).
Tester: pytest + cargo test grønne (CLI-parsing, efficiency calc, JSON).
Observasjoner: enkelte Strava-økter uten watt (device_watts=False) → policy må avklares.
Branch: feature/strava-fetch-mode

M7.6B — No-watt policy & fallback (S1B)
Backend: rute økter uten watt eller device_watts=False til hr_only pipeline.
Frontend (senere i M8): vise varsel “Ingen effekt-data registrert – enkelte metrikker begrenset.”
Logging: structured WARN med no_power_reason.
Observability: metrics sessions_no_power_total, sessions_device_watts_false_total.
Tester: pytest fixture for device_watts=False og Rust analyzer test (ingen panic, JSON mode="hr_only").
Varsel vises i publish (dry-run).
Branch: feature/no-watt-policy

S2 — Vær & profiler (🌤️)
Værklient (vind/temp/trykk) med caching per (lat,lon,timestamp).
Profilsettings (total vekt, sykkeltype, Crr-preset) + validering/defaults (estimat=true).
CLI integrasjon: justert effektivitet basert på værkontekst.
DoD: ≥95 % cache-hit ved rekjøring; sanity-test hoppes over når publiseringsflyt ikke berøres.
Status: ✅ Ferdig (pytest + cargo grønne, stabile tall ±1–2 W).

S3 — Fysikkmotor (🚴)
Kraftmodell: gravitasjon, rulling (Crr), aero (CdA), akselerasjon + drivverkstap.
Høyde-smoothing i egen modul + outlier-kutt (stopp/sving).
Sample-watt + 5 s glatting + NP/avg i CLI.
DoD: Golden test i CI (±1–2 W; NP/avg ±1 W) oppnådd; pytest/cargo grønn; deterministisk output.
Status: ✅ Ferdig

S4 — Kalibrering (CdA/Crr-fit) (🎯)
Kalibreringsprosedyre (5–8 min, 3–6 % bakke). Fit CdA/Crr fra data (uten powermeter).
Lagre pr sykkel/profil; bruk globalt i beregninger.
DoD: Reproducible fit på testdata; MAE ≤10 % mot powermeter på kalibreringssegment; flagg “Kalibrert: Ja/Nei”.
Status: ✅ Ferdig

S5 — Indoor pipeline + GPS/Wind integrasjon (🧪)

Indoor/outdoor-pipeline koblet til fysikkmotor m/ vindkorrigering.
CLI-output: watts, wind_rel, v_rel, calibrated, status.
Bonus: Eksponert backend-API for frontend — cli/session_api.py: analyze_session() (+ tests/test_api.py), deterministisk JSON for enkel integrasjon i M8.
Golden test med syntetisk GPS+vindfelt etablert.
Unicode-bug i CLI løst.
Tester: ✅ cargo/pytest grønne, output stabil ±1–2W.

Status: ✅ Ferdig
🔧 Dynamisk DoD (må alltid være oppfylt)
Robust CLI: Alle subcommands (session, efficiency) kjører uten runtime-feil på gyldige inputfiler.
Profiler: profile.json lagres/lastes; felt calibrated, cda, crr, calibration_mae oppdateres ved kalibrering.

Kalibrering:
MAE ≤ 10 % på kalibreringssegment mot powermeter.
Output markerer calibrated: Ja/Nei + reason (nulles ut ved suksess).
Fysikk: Bruker physics-output som baseline (NP/avg, smoothing).
Determinisme: Samme input gir samme output (±1–2 W).
Tester: cargo test + pytest må være grønne i CI.
Observabilitet: CLI og API viser nøkkelfelter (effektivitet, NP, IF, VI, Pa:Hr, W/beat, kalibrering).
Integrasjon: Rust-kjerne eksponert til Python via PyO3 (analyze_session, rust_calibrate_session).

Nytt (A): Konsistensregler i output
Hvis calibrated=True → reason=None.
Når GPS/vind brukes → mode="outdoor".
status avledes fra HR når mulig (ellers behold LIMITED).


S6 — CLI/Reports & observabilitet (📈)
Rapportfelt: NP, Avg, VI, Pa:Hr, W/beat, PrecisionWatt ±usikkerhet.
Strukturerte logger (level, tidsbruk, cache hits).

Metrics for no-watt (sessions_no_power_total).
Generere rapporter (CSV/JSON) med trender.
Historikk over kalibrering og WPB baseline.
Docs: “How it works” + “Known limits”.
DoD: deterministisk rapport; loggnivå styrbart via flagg/env.

S7 — QA & hardening (🛡️)
Edge-cases: manglende vær, GPS-drift, null HR, kort økt.
Flere golden-tester med variasjon i vær/terreng.
Golden på ekte ride uten powermeter + plausibilitet mot HR/trend.
Oppdatér CGS v1.1-kobling.
Nytt (B): Refaktorér testoppsett (conftest.py, test_utils.py) for mindre mocking-knot.
DoD: alle tester grønne; CGS konsumerer nye felter uten regress.




S8 — Scaffold & dataadapter (🧩)

React/Tailwind scaffold, routing, state.
Bruk eksisterende Python-API analyze_session() som backend-adapter (forenkler integrasjon).
Nytt: sørge for at frontend alltid forventer schema_version i output og håndterer HR-only fallback.

DoD:
Viser én økt (mock) i UI; bytte mock→live via .env.
JSON-output fra backend valideres mot schema_version.
HR-only fallback vises uten crash i UI.


S8.5 — Mini-sprint: Precision Watt stubs + short-session guard (🧩)
Status: ✅ Ferdig

Oppgaver
Utvidet SessionReport med: precision_watt, precision_watt_ci, sources, cda, crr, reason (nullable).
Oppdatert mockSession med dummy-serier (40 samples).
Dev-sanity i SessionView (kun DEV): teller PW/CI samples.
Short-session guard (<30 samples): kontrollert melding, ingen crash.

DoD
App bygger grønt med nye felter.
Dev-sanity synlig i DEV.
Kort-økt gir kontrollert beskjed.

S9 — Økt-kort & nøkkelmetrikker (📊)
SessionCard viser NP, IF, VI, Pa:Hr, W/slag, CGS og PrecisionWatt-verdi.
Indoor/Outdoor-chip og Kalibrert-status i UI; ryddigere navigasjon.
Short-session guard (<30 samples) med kontrollert melding; HR-only fallback støttes uten crash.
MockSession oppdatert (outdoor/indoor-varianter); konsistent rendering.
DoD: Nøkkelmetrikker vises korrekt i UI, kort-økt og HR-only håndteres uten crash, prod-build verifisert, tester grønne.

🔁 Dynamisk DoD & Frontlog (oppdatert etter S11)
✅ FERDIG – S9 — Økt-kort & nøkkelmetrikker (📊)

Status: Ferdig
Leveranser:
SessionCard viser NP, IF, VI, Pa:Hr, W/slag, CGS og PrecisionWatt-verdi.
Indoor/Outdoor-chip og Kalibrert-status i UI med ryddigere navigasjon.
Kort-økt (<30 samples) gir kontrollert beskjed; HR-only fallback støttes uten crash.
MockSession oppdatert (outdoor/indoor-varianter); konsistent rendering.
DoD: Nøkkelmetrikker vises korrekt i UI; kort-økt og HR-only håndteres uten crash; prod-build verifisert; tester grønne.

✅ FERDIG – S10 — Live API-integrasjon (🌐)

Oppgaver (levert):
api.ts med timeout/abort + schema-guard (+ simulateInvalid dev-switch).
sessionStore med kildevalg (api/mock), identisk state-shape og robust feilflyt.
ErrorBanner + “Prøv igjen” i SessionView; uendret layout for mock/live.
.env.example (VITE_BACKEND_URL).
Vitest for ErrorBanner/SessionView/store; jsdom-oppsett.

DoD (bestått):
Live-økt hentes og rendres uten crash.
Mock-data fortsatt brukbare i dev.
Feiltilstander (offline/timeout/404/500) → banner + retry.
Prod/dev viser identisk layout.
Typecheck/build/test grønt.

Funn (A/B/C):

A (DoD): 404 → “Ingen data å vise”; 500/timeout → generisk feil. Schema-guard fail-closed.

B (Frontlog): Rebuild-script for Rust-kjerne; CI-steg for maturin + cache; doc for venv/VSCode-interpreter.

C (Observasjon): Pytest feilet pga. tolkermismatch (conda ↔ system). Lås til prosjekt-venv og unngå ../src/...-imports i src/*.

✅ FERDIG – S11 — Analysepanel & trender (📈)
Oppgaver (fullført):
AnalysisPanel med status-badges (FULL, HR-only, LIMITED).
AnalysisChart med CI-bånd (PrecisionWatt), tooltip og NP/PW-trend.
Edge-case-håndtering (kort økt, kalibrert =false, tomme data).
Tooltip viser Kilde og Kalibrert.
CI-bånd vises/skjules (kontrollert; test midlertidig skip’et men patch klar).
Tester for hover, fallback og smoke; ytelse testet (1 Hz / 2 t).
Prod/dev layout verifisert identisk.
Lint + type-check + build/test grønt.

DoD (bestått):
Analysepanel gir innsikt og er robust.
Trendgraf fungerer med edge-case-data.
CI-bånd og tooltip interaktive og korrekte.
Feiltilstander gir fallback og banner.
Prod og dev identisk ytelse.
Type-sikkerhet 100 %.
Funn (A/B/C):
A (DoD): Legg til visuell indikator ved kalibrert =false (i tooltip/legend).
B (Frontlog): Opprett egen TrendsChart for aggregert NP/PW over flere økter (videresatt til S12).
C (Observasjon): Test for CI-bånd skip’et i CI → patch planlagt i S12.

🔜 PLANLAGT – S12 — Brukeropplevelse & kalibreringsguide (🎨🧭)

Oppgaver:
Onboarding for første outdoor-økt; stegvis kalibreringsmodal.
Info for brukere uten wattmåler (HR-fallback, tydelig språk).
Rydd labels; skille Mode (Indoor/Outdoor) vs. Kilde (API/Mock).
Knytte til schema-felter (calibrated, cda, crr, reason).
Ny fra S11: TrendsChart for aggregert NP/PW → inkluderes i UI-oversikt.
[ny prosessforbedring] Legg inn fast bygg- og import-sjekk før push:
python -m maturin develop --release -F python --manifest-path core/Cargo.toml && python -c "import cyclegraph_core"
slik at cyclegraph_core alltid kompileres og importeres korrekt før pytest/CI kjører.

DoD (presisert):
“Ferdig kalibrert” trigger backend-flag og speiles i UI.
HR-only-flyt forståelig uten tekniske termer.
TrendsChart viser NP/PW per økt uten lagg.
Enhetstester på nye UI-komponenter; samme feilbanner-mønster ved svikt.
Bygg- og import-sjekk for cyclegraph_core må kjøre grønt før merge.

🔜 S13 — QA, Polish, CI & Definition of Truth (🚀✅)
Mål
Kvalitetssikre hele kjeden, etablere Definition of Truth, innføre schema-kontrakter og første live-kobling av TrendsChart.
Oppgaver
Kvalitet / QA
Tilgjengelighet (a11y: kontraster, tastaturnavigasjon).
Verifiser kalibrerings-flow fra S12 i Lighthouse (UX > 80).
Sanity-test kjøres kun ved publisering.
Miljøhensyn: unngå npm ci i OneDrive → bruk npm install eller flytt mappe.
QA-sjekk: CI validerer at cyclegraph_core kan importeres, og at pytest kjører 52 tester.
CI / Testing

GitHub Actions: Rust toolchain (MSVC) + maturin build.
Kjør: pytest (CLI), vitest (FE), schema-kontrakter.
Logging-test i CI: stdout = ren JSON, stderr = debug/log.
Kontrakttest for /api/trends mot trends_response.v1.json.
Definition of Truth
docs/definition-of-truth.md:

Kilde → avledet → rull-up: sessions → session_metrics → daily_user_metrics.
Begreper: w_per_beat, pw_efficiency, HR-fallback.
Tid/lagring: UTC som sannhet; presentasjon kan mappe til Europe/Oslo ved behov.
Versjonering: schema_version = 0.7.x.
JSON-schemaer:
schema/session_metrics.v1.json
schema/daily_user_metrics.v1.json
schema/trends_response.v1.json
Lett validator i CI (ajv/TS).
Trend Analysis (minimal patch)
Backend: /api/trends?from&to&bucket=day (les fra daily_user_metrics, eller tom struktur hvis ingen data).
Frontend: mock → live bak feature-toggle VITE_USE_LIVE_TRENDS=true.
“Ingen data ennå”-state + robust AbortError-håndtering.
Docs: nytt avsnitt om TrendsChart i Using Precision Watt.

DoD
Lighthouse: Perf > 80, a11y > 90.
CI grønn inkl. maturin + schema-kontrakter + logging-test.
/api/trends returnerer 200 med korrekt struktur (også tom respons).
pytest + cargo + vitest består; cyclegraph_core import-sjekk OK (52 tester).
Prod-build stabil; ingen manuelle rebuild-steg.

Estimat
QA/Lighthouse/a11y: 2–3 t
CI/schema-validering: 2–3 t
DoT + docs: 2 t
Trend-patch (BE+FE): 2–4 t
Sum: 8–12 t

🔜 S13 — QA, Polish, CI & Definition of Truth (🚀✅)
Status: ✅ Ferdig
🎯 Mål
Kvalitetssikre hele kjeden, etablere Definition of Truth, innføre schema-kontrakter og første live-kobling av TrendsChart.
🧪 Oppgaver

Kvalitet / QA
✅ Tilgjengelighet (a11y: kontraster, tastaturnavigasjon) verifisert.
✅ Kalibrerings-flow fra S12 testet i Lighthouse (UX-score: Performance 74 ⚠️, Accessibility 90 ✅, Best Practices 100 ✅, SEO 82 ✅).
✅ Sanity-test utført ved publisering.
✅ Miljøhåndtering OK – npm install brukt, ikke npm ci i OneDrive.
✅ QA-sjekk bekrefter at cyclegraph_core kan importeres og at pytest kjører alle 52 tester.
CI / Testing

✅ GitHub Actions kjører Rust toolchain (MSVC) + maturin build.
✅ pytest, cargo test og vitest fullført grønt.
✅ Schema-kontrakter valideres via ajv-cli.
✅ Logging-test i CI gir ren JSON til stdout og debug til stderr.
✅ Kontrakttest for /api/trends mot trends_response.v1.json fungerer korrekt.
Definition of Truth

✅ docs/definition-of-truth.md etablert:
Datakjede: sessions → session_metrics → daily_user_metrics.
Begreper definert: w_per_beat, pw_efficiency, HR-fallback.
Tid/lagring: UTC som sannhet, lokal mapping til Europe/Oslo.
Versjonering: schema_version = 0.7.x.

✅ JSON-schemaer:
schema/session_metrics.v1.json
schema/daily_user_metrics.v1.json
schema/trends_response.v1.json
✅ Lett validator i CI (ajv/TypeScript).

Trend Analysis (minimal patch)

✅ Backend: /api/trends?from&to&bucket=day leser fra daily_user_metrics og returnerer tom struktur hvis ingen data.
✅ Frontend: mock → live bak feature-toggle VITE_USE_LIVE_TRENDS=true.
✅ “Ingen data ennå”-state og robust AbortError-håndtering implementert.
✅ Dokumentasjon oppdatert med nytt avsnitt om TrendsChart i Using Precision Watt.
✅ DoD-verifikasjon
Kriterium	Resultat
Lighthouse	Performance 74 ⚠️, Accessibility 90 ✅, Best Practices 100 ✅, SEO 82 ✅
CI (maturin + schema + logging)	✅ Grønn
/api/trends struktur	✅ 200 + gyldig respons (inkl. tom)
pytest + cargo + vitest	✅ Alle tester passert (52 totalt)
Prod-build	✅ Stabil uten manuelle rebuilds
⏱️ Estimat (faktisk brukt)
QA/Lighthouse/a11y: ~3 t
CI/schema-validering: ~3 t
DoT + docs: ~2 t
Trend-patch (BE + FE): ~3 t
Sum: ≈ 11 t

🆕 Dynamisk DoD — Sprint 14.5: Precision Watt E2E (Backend fullføring + verifikasjon)
🎯 Mål
Ferdigstille backend E2E for Precision Watt slik at alle fem øktene (ride1–5) kan analyseres med vær + profil, persisteres, og (valgfritt) publiseres til Strava – idempotent, robust og uten mock. Samtidig: profil/kalibrering i backend, auto-refresh av Strava-token, og støtte for økter opptil 5 timer.
✅ Gjort i S14 (flyttet status)
API oppe (127.0.0.1:5179), app.py laster .env (dotenv), debug-endepunkter finnes.
Token-flyt reetablert (authorize → code → token).
ride3 publisert med Precision Watt ≈ 225 W (Strava viste 198 W).
Publish-pipeline kjører; toggles leses; ride1/2/4/5 publiserte kun Strava’s tall (manglende analyze).
Hjelpeskript for start/publish/auth etablert.
📦 Omfang (leveranser)
Backend (Rust/Python)
Værdata i analysen: analyze_session() henter vindstyrke/retning, temp, trykk → lufttetthet (ρ); kobler GPS-heading ↔ vindvinkel; brukes i PW-formelen.
Profil + defaults: hvis profil mangler → bruk dokumenterte safe defaults (rider_weight, bike_type, bike_weight, tire_width, tire_quality). Når profil finnes → overstyr defaults.
Profil/kalibrering i backend: lagre/laste profil (JSON/fil-DB), bruke verdiene i analyse (total masse + Crr avledet fra dekk-kvalitet/bredde).
Sessions 1–5: kjør analyze for alle fem; persister:
precision_watt, precision_watt_ci, cda, crr_used, reason, publish_state, publish_hash.
Idempotent publish: publish_hash = sha256(activity_id | pw | ci) → hopp over duplikat.
Auto-refresh Strava token: ved 401/utløp → bruk refresh_token, oppdater .env (access/refresh/expires_at), retry.
Øktlengde: støtte ≤ 5 timer @ 1 Hz med timeout/chunk-guards.
Publish-tekst: inkluder nøyaktig:
Check out my full ride analysis at CycleGraph.app
Lagring/Observabilitet
Schema v0.7.3 (additivt): bike_type, bike_weight, tire_width, tire_quality, rider_weight, crr_used, precision_watt, precision_watt_ci, publish_state, publish_hash, published_to_strava, publish_time, consent_*.
Metrikker: pw_publish_success_total, pw_publish_fail_total.
Logger: strukturert Import → Analyze → Persist → Publish (med tidsbruk/resultat).
API (MÅ være i drift i S14.5)
POST /api/sessions/:id/analyze
POST /api/sessions/:id/publish
GET /api/profile/get
POST /api/profile/set ← brukes i S14.5 for å verifisere at profil påvirker beregning
GET /api/health, GET /api/debug/token_present
CLI/Script
scripts/tools/start_api.ps1
scripts/tools/publish_ride.ps1
scripts/tools/strava_reauth.ps1
🧪 DoD (sjekkliste)
Funksjonelt
 analyze_session() bruker vær (inkl. vindvinkel og ρ) i PW (ikke mock).
 Profil påvirker beregningen: defaults ved fravær; profilverdier overstyrer defaults.
 ride1–5: etter analyze har data/sessions/*.json PW + CI + CdA + Crr_used + reason (ikke bare Strava’s tall).
 Publish idempotent (hash), 401→auto-refresh + retry, 429→backoff.
 Støtter ≤ 5 timer datasett uten jank/feil.
 Publish-kommentar inkluderer “Check out my full ride analysis at CycleGraph.app”.
Observabilitet & persist
 Schema v0.7.3 validerer (additivt, bakoverkompatibelt).
 Logger viser hver fase + varighet; metrikker økes korrekt.
Token & robusthet
 refresh_token-flyt oppdaterer .env (access/refresh/expires_at).
 /api/debug/token_present → ok:true under drift; publish tåler access-utløp.
Profil-verifikasjon (S14.5-krav)
 POST /api/profile/set med realistiske verdier før analyze.
 Re-analyze ride1–5 → PW/Crr_used/CdA endrer seg konsistent ift. defaults.
🧪 Akseptansekjøring (kommandoer)
Start API (vindu A)
powershell -NoProfile -ExecutionPolicy Bypass -File .\scripts\tools\start_api.ps1 -Port 5179
Helse/token (vindu B)
Invoke-RestMethod http://127.0.0.1:5179/api/health
Invoke-RestMethod http://127.0.0.1:5179/api/debug/token_present
Sett profil (påvirker masse/Crr)

$body = @{
  rider_weight_kg = 103
  bike_weight_kg  = 9.5
  bike_type       = "road"
  tire_width_mm   = 28
  tire_quality    = "gp5000"
  bike_name       = "Canyon Endurace"
} | ConvertTo-Json
Invoke-RestMethod -Method Post -ContentType "application/json" `
  -Uri http://127.0.0.1:5179/api/profile/set -Body $body


Analyze alle 5
1..5 | % { Invoke-RestMethod -Method Post "http://127.0.0.1:5179/api/sessions/ride$_/analyze" }
Verifiser persist (eksempel ride3)
Get-Content .\data\sessions\ride3.json -Raw | ConvertFrom-Json |
  Select session_id, precision_watt, precision_watt_ci, crr_used, cda, reason, publish_state | Format-List
Publish alle 5 (idempotent + riktig kommentar)
1..5 | % { Invoke-RestMethod -Method Post "http://127.0.0.1:5179/api/sessions/ride$_/publish" }
Forventning (profil-effekt):
precision_watt skal endre seg vs. før profil; crr_used reflekterer dekk-kvalitet/bredde; vær (ρ/vindvinkel) påvirker PW.
🔦 (Valgfritt) Tynn FE-smoke i S14.5 – for trygg overgang til S15
 Frontend henter live /api/sessions/:id og viser PW/CI i SessionCards (VITE_USE_MOCK=false).
 TrendsChart kaller /api/trends og håndterer tom respons uten crash.
 Responsiv layout – enkel manuell sjekk (mobilbredde).
(Full profil-UI, toggles og komplett FE-synlighet ligger i S15.)
🧯 Troubleshooting (kort)
has_token=False / mangler STRAVA_ACCESS_TOKEN → start server fra repo-rot, ha load_dotenv(override=True) øverst i app.py.
404 etter authorize → ok ved manuell code (evt. legg /api/debug/oauth_capture).
Port i bruk → netstat -ano | findstr :5179 → taskkill /PID <PID> /F.
Tom publish-respons i PS5.1 → endpoint kan returnere 204; bruk publish_ride.ps1.
from __future__ syntax error → må stå helt øverst i fila.
📌 Commit/tag-forslag
git add .
git commit -m "S14.5: Backend PW E2E: weather+profile in analyze, schema v0.7.3 persist, idempotent publish w/ token auto-refresh, 5h guard, logs/metrics."
git tag -a v0.14.5 -m "Sprint 14.5 E2E PW backend complete"git push --follow-tags

🧩 Sprint 15 — Frontend integrasjon + innholdsmigrering til cyclegraph.app
🎯 Mål
Koble frontend ←→ backend slik at bruker ser korrekte analyserte data (ikke mock) i Session Cards/Trend, og samtidig migrere landingssiden til cyclegraph.app (Vercel) – tospråklig, SEO/OG riktig, >90 Lighthouse.
📦 Omfang (leveranser)
Frontend (React/TS/Vite)
Session Cards viser: PW, PW CI, CdA, crr_used, publish-status (done/failed/pending/none), publish_time, og Strava activity-link.
Trend-visning (enkel): PW over tid for de siste N øktene (real data).
Profil/kalibrering UI: dropdowns for bike_type, bike_weight_kg, tire_width_mm, tire_quality, felt for rider_weight_kg, bike_name; samtykke med versjon + tidsstempel.
Toggle: “Publisér Precision Watt til Strava”.
Lagring: POST/PUT til backend for profil; backend bruker dette ved neste analyze.
Ingen mock: all visning leser ekte data fra API (/api/sessions/:id, /api/sessions/list, /api/profile/get).
A11y: labels, fokus, tastatur.
Migrering — cyclegraph.app (Vercel)
Flytt alt fra landing/ inn i hovedrepo (f.eks. frontend/public eller frontend/app/landing).
Konsolider i18n (NO/EN).
Deploy med Vercel (main), DNS verifisert (root + www), favicon/OG/meta oppdatert, responsivt.
Kjør Lighthouse og fiks >90 (SEO/Accessibility/Best Practices/Performance så langt det lar seg gjøre).
Observabilitet
Frontend feilhåndtering (UI-banner) for 401/403 (foreslå “Koble Strava på nytt”).
Enkel “Activity log” i UI: siste analyze/publish med timestamp.
🧪 DoD (sjekkliste)
Funksjonelt
 Session Cards viser verdier fra ekte analyse (PW, CI, CdA, Crr brukt, publish-status/tid).
 Trend-graf henter ekte data (minst 5 økter).
 Profil/kalibrering kan lagres, og ny analyze bruker verdiene (verifiser med re-analyze ride1–5 og se endring).
 Publiseringstoggle kan settes i UI og respekteres i backend.
Migrering
 cyclegraph.app og www.cyclegraph.app viser ny landingsside fra main-repo.
 NO/EN toggle fungerer; meta/OG/favicons riktig.
 Lighthouse SEO/Acc > 90 (logg resultat i docs/deployment-log.md).
Ingen mock
 Alle API-kall går mot live endpoints. “Dummy”/mock slått av/ryddet.
Akseptansekjøring
 Åpne frontend (npm run dev) → Session Cards viser data for ride1–5.
 Endre profil (f.eks. dekk-kategori) → re-analyze ride3 → PW endres konsistent.
 Slå på publish-toggle i UI → publisering skjer ved neste analyze/publish, kommentar inkluderer “Check out my full ride analysis at CycleGraph.app”.
 Lighthouse-rapport >90 (lagres i docs/deployment-log.md).
🧽 (Frivillig) Sprint 16 — “Polish & Launch” (liten buffer)
🎯 Mål
Polish + release hygiene etter S15, kun for å beskytte kognitiv kapasitet.
Omfang (light)
Release notes + README oppdatert (Quick Start + Troubleshooting + Scripts).
E2E-script: én kommando som kjører import→analyze→publish for et sett økter.
Telemetry finpuss (labels, timing).
Feiltekster i UI (oversatt + konsistente).
Siste SEO (sitemap/robots, canonical).
DoD
 “Launch Playbook” ferdig i /docs/launch-playbook.md.
 README Quick Start (dev) + brukerhjelp (kalibrering, publish).
 Demo-brukerflyt testet (kalibrer → last opp → analyze → publish → se på web).
 Alt grønt i CI.
📌 Notater/Presiseringer fra innsikten din (og hvordan vi sjekker dem)
Ride3 ble publisert med PW ≈ 225W (≠ Strava 198W).
→ Vi kjører ride3/analyze på nytt med vær aktivert, og logger ut brukt crr_used, CdA, reason, precision_watt_ci.
Værberegning var trolig ikke aktiv i den runden.
→ Inngår i S14.5 DoD. Test: slå av/på vær via env-toggle (om du har), se effekt på PW.
Defaults: må dokumenteres og matche UI-defaults senere (S15).
→ S14.5: definér og bruk i backend. S15: bind til UI.
Ride1/2/4/5 publiserte Strava-tall (ikke PW).
→ S14.5: kjør analyze → PW for alle fem.
Frontend skal lese alt fra API, ikke mock.
→ Lagt i S15 + eksplisitt DoD “Ingen mock”.
Profil/dropdowns + lagring + samtykke + kalibrering.
→ Backend i S14.5 (verdier brukt i analyse). UI i S15.
Øktlengde 5t → S14.5 (backend + test).

Kommentar-tekst i Strava: “Check out my full ride analysis at CycleGraph.app”.
→ S14.5 publish-format + S15 UI-toggle.
🧯 Troubleshooting (kortversjon – ligger også i skriptene)
has_token=False / Missing STRAVA_ACCESS_TOKEN → Server startet uten ny .env. Stopp, start fra repo-rot, load_dotenv(override=True) øverst i app.py.
404 etter authorize → ok når du bruker manuell code. (Evt. legg /api/debug/oauth_capture i API.)
Port i bruk → netstat -ano | findstr :5179 → taskkill /PID <PID> /F.
Tom publish-respons i PS5.1 → endpoint kan returnere 204; bruk publish_ride.ps1 for tydelig output.
from __future__ syntax error → må stå øverst i fila.
Hvis du vil, kan jeg nå oppdatere publish-kommentaren (nøyaktig tekst), legge inn auto-refresh-snutten i publish.py/strava_auth.py, og gi deg en 1-kommando E2E som kjører alt for ride1–5 som siste steg i S14.5.

git add .
git commit -m "Lock S13–S15 frontlog: DoT, trends, PW E2E + Bike Setup, i18n migration"
git push