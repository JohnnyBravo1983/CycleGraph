Definition of Done — Frontlog

Samlet oversikt over hva som er ferdig, påbegynt og planlagt. Ikke-sensitive, høynivå punkter.
Sist oppdatert: 2025-09-25

✅ FERDIG
M1 — Prosjektstruktur & repo
Standard repo-oppsett: core/, cli/, docs/, data/, shapes/, tests/.
Init GitHub-repo (README, lisens, .gitignore).
Bygg/kjørbare grunnkommandoer dokumentert i README (Rust/Python).
CI eller lokal “quick check”: cargo check og enkel Python-kall fungerer.

M2 — Rust-core med PyO3
Cargo.toml satt opp med PyO3 av riktig versjon.
Minst én eksponert Rust-funksjon bundet til Python (importerbar i Python).
cargo test (grunnleggende) og “import i Python” fungerer lokalt.
Kodekommentarer: hvor core-API lever og hvordan bygge.

M3 — CLI-oppsett & dataflyt
cli/analyze.py kjører ende-til-ende mot core (Rust) med argparse-flagg.
I/O-kontrakt: leser CSV/streams, skriver rapport/JSON til output/.
Grunnleggende feilhåndtering (fil mangler, feil format) med tydelige feilmeldinger.
“Happy path” demonstrert på sample data.

M4 — Dummydata & testkjøring
Dummy/samples tilgjengelig i repo (ikke sensitive).
Kjøreeksempel dokumentert: python -m cli.analyze … produserer forutsigbar rapport.
Sanity-sjekk: verdier i rapport er konsistente og uten exceptions.
Enkle tester/skript verifiserer flyten.

M5 — SHACL-validering
SHACL-shapes for RDF definert i shapes/.
Valideringsscript i Python: kjørbar via CLI-flag eller separat kommando.
Eksempelfiler validerer OK; feil rapporteres forståelig.
Kort bruksdokumentasjon i docs/ (hva, hvordan, hvor output havner).

M6 — Strava-integrasjon (API & import)
OAuth-flyt verifisert; tokens lagres sikkert lokalt (ingen hemmeligheter i repo).
Henting av aktiviteter med paging og tidsfilter (--since) fungerer.
Streams → CSV (minst time,hr,watts), robust håndtering av 401/403/429/5xx.
Inkrementell state (ingen duplikater), og grunnlogg over kjøringer.
End-to-end “import → analyze” fungerer på ≥3 reelle økter (lokalt verifisert).

M7 — Analysefunksjoner (effektivitet, treningsscore)
CGS v1 etablert: IF/NP/VI/Pa:Hr/WpB + 28d baseline (±25 %), tydelige fallbacks.
Badges: Big Engine (+6 %, ≥30 min) og Metronome (VI≤1.05, Pa:Hr≤1.05).
Python: Strava publish-formatter m/ språk, trimming og fallbacks + tester grønne.
Rust: unit + golden + perf-guard (2h@1Hz ≤200 ms) grønne.
Strava-klient: auto-refresh, header-fix, comment→description-fallback, verifisert live.
Docs: CGS_v1, CLI usage, Strava publish oppdatert.

M7.5 — Backend-forfining (CGS v1.1, explain)
Systemtest grønn på steg 0–7: PyO3-import, CLI-hjelp, E2E med sample, idempotens, feilhåndtering, Rust/golden, perf-smoke (~0.73s).
SHACL- og Strava-mock-test kan hoppes når ingen .ttl eller mock-data er tilgjengelig.
Fikser gjort: ryddet cmd_session, fikset continue-feil, lagt til mod metrics; i lib.rs (løste E0432), output verifisert deterministisk.

M7.5 — Forebyggende tester
Pytest: _analyze_session_bridge() kaster ValueError ved tomme arrays.
Rust golden-test for w_per_beat() med edge-case input (NaN/null/mismatch).
Branch: feature/m7.5-preventive-tests
Tester grønne: pytest + cargo test (inkl. golden).
Observasjoner: w_per_beat() håndterer NaN/mismatch robust; logging/Result kan vurderes senere.

M7.5 — GitHub Actions (basic CI)
Minimal workflow satt opp: kjører pytest -q og cargo test --tests -q på push/PR.
Branch: feature/m7.5-ci-basic
Tester grønne: workflow verifisert OK på GitHub.
Observasjon: base klar for utvidelse med systemtest senere.

M7.6 — Strava Fetch & Modusdeteksjon (S1)
Auto-modus basert på trainer, sport_type og device_watts.
CLI-flag --mode roller|outdoor som overstyrer auto.
JSON-output rutes til riktig pipeline (indoor/outdoor).
Tester: pytest + cargo test grønne (CLI-parsing, efficiency calc, JSON).
Observasjoner: enkelte Strava-økter uten watt (device_watts=False) → policy må avklares.
Branch: feature/strava-fetch-mode

M7.6B — No-watt policy & fallback (S1B)
Backend: rute økter uten watt eller device_watts=False til hr_only pipeline.
Frontend (senere i M8): vise varsel “Ingen effekt-data registrert – enkelte metrikker begrenset.”
Logging: structured WARN med no_power_reason.
Observability: metrics sessions_no_power_total, sessions_device_watts_false_total.
Tester: pytest fixture for device_watts=False og Rust analyzer test (ingen panic, JSON mode="hr_only").
Varsel vises i publish (dry-run).
Branch: feature/no-watt-policy

S2 — Vær & profiler (🌤️)
Værklient (vind/temp/trykk) med caching per (lat,lon,timestamp).
Profilsettings (total vekt, sykkeltype, Crr-preset) + validering/defaults (estimat=true).
CLI integrasjon: justert effektivitet basert på værkontekst.
DoD: ≥95 % cache-hit ved rekjøring; sanity-test hoppes over når publiseringsflyt ikke berøres.
Status: ✅ Ferdig (pytest + cargo grønne, stabile tall ±1–2 W).

S3 — Fysikkmotor (🚴)
Kraftmodell: gravitasjon, rulling (Crr), aero (CdA), akselerasjon + drivverkstap.
Høyde-smoothing i egen modul + outlier-kutt (stopp/sving).
Sample-watt + 5 s glatting + NP/avg i CLI.
DoD: Golden test i CI (±1–2 W; NP/avg ±1 W) oppnådd; pytest/cargo grønn; deterministisk output.
Status: ✅ Ferdig

S4 — Kalibrering (CdA/Crr-fit) (🎯)
Kalibreringsprosedyre (5–8 min, 3–6 % bakke). Fit CdA/Crr fra data (uten powermeter).
Lagre pr sykkel/profil; bruk globalt i beregninger.
DoD: Reproducible fit på testdata; MAE ≤10 % mot powermeter på kalibreringssegment; flagg “Kalibrert: Ja/Nei”.
Status: ✅ Ferdig

S5 — Indoor pipeline + GPS/Wind integrasjon (🧪)

Indoor/outdoor-pipeline koblet til fysikkmotor m/ vindkorrigering.
CLI-output: watts, wind_rel, v_rel, calibrated, status.
Bonus: Eksponert backend-API for frontend — cli/session_api.py: analyze_session() (+ tests/test_api.py), deterministisk JSON for enkel integrasjon i M8.
Golden test med syntetisk GPS+vindfelt etablert.
Unicode-bug i CLI løst.
Tester: ✅ cargo/pytest grønne, output stabil ±1–2W.

Status: ✅ Ferdig
🔧 Dynamisk DoD (må alltid være oppfylt)
Robust CLI: Alle subcommands (session, efficiency) kjører uten runtime-feil på gyldige inputfiler.
Profiler: profile.json lagres/lastes; felt calibrated, cda, crr, calibration_mae oppdateres ved kalibrering.

Kalibrering:
MAE ≤ 10 % på kalibreringssegment mot powermeter.
Output markerer calibrated: Ja/Nei + reason (nulles ut ved suksess).
Fysikk: Bruker physics-output som baseline (NP/avg, smoothing).
Determinisme: Samme input gir samme output (±1–2 W).
Tester: cargo test + pytest må være grønne i CI.
Observabilitet: CLI og API viser nøkkelfelter (effektivitet, NP, IF, VI, Pa:Hr, W/beat, kalibrering).
Integrasjon: Rust-kjerne eksponert til Python via PyO3 (analyze_session, rust_calibrate_session).

Nytt (A): Konsistensregler i output
Hvis calibrated=True → reason=None.
Når GPS/vind brukes → mode="outdoor".
status avledes fra HR når mulig (ellers behold LIMITED).


S6 — CLI/Reports & observabilitet (📈)
Rapportfelt: NP, Avg, VI, Pa:Hr, W/beat, PrecisionWatt ±usikkerhet.
Strukturerte logger (level, tidsbruk, cache hits).

Metrics for no-watt (sessions_no_power_total).
Generere rapporter (CSV/JSON) med trender.
Historikk over kalibrering og WPB baseline.
Docs: “How it works” + “Known limits”.
DoD: deterministisk rapport; loggnivå styrbart via flagg/env.

S7 — QA & hardening (🛡️)
Edge-cases: manglende vær, GPS-drift, null HR, kort økt.
Flere golden-tester med variasjon i vær/terreng.
Golden på ekte ride uten powermeter + plausibilitet mot HR/trend.
Oppdatér CGS v1.1-kobling.
Nytt (B): Refaktorér testoppsett (conftest.py, test_utils.py) for mindre mocking-knot.
DoD: alle tester grønne; CGS konsumerer nye felter uten regress.




S8 — Scaffold & dataadapter (🧩)

React/Tailwind scaffold, routing, state.
Bruk eksisterende Python-API analyze_session() som backend-adapter (forenkler integrasjon).
Nytt: sørge for at frontend alltid forventer schema_version i output og håndterer HR-only fallback.

DoD:
Viser én økt (mock) i UI; bytte mock→live via .env.
JSON-output fra backend valideres mot schema_version.
HR-only fallback vises uten crash i UI.


S8.5 — Mini-sprint: Precision Watt stubs + short-session guard (🧩)
Status: ✅ Ferdig

Oppgaver
Utvidet SessionReport med: precision_watt, precision_watt_ci, sources, cda, crr, reason (nullable).
Oppdatert mockSession med dummy-serier (40 samples).
Dev-sanity i SessionView (kun DEV): teller PW/CI samples.
Short-session guard (<30 samples): kontrollert melding, ingen crash.

DoD
App bygger grønt med nye felter.
Dev-sanity synlig i DEV.
Kort-økt gir kontrollert beskjed.

S9 — Økt-kort & nøkkelmetrikker (📊)
SessionCard viser NP, IF, VI, Pa:Hr, W/slag, CGS og PrecisionWatt-verdi.
Indoor/Outdoor-chip og Kalibrert-status i UI; ryddigere navigasjon.
Short-session guard (<30 samples) med kontrollert melding; HR-only fallback støttes uten crash.
MockSession oppdatert (outdoor/indoor-varianter); konsistent rendering.
DoD: Nøkkelmetrikker vises korrekt i UI, kort-økt og HR-only håndteres uten crash, prod-build verifisert, tester grønne.

🔁 Dynamisk DoD & Frontlog (oppdatert etter S11)
✅ FERDIG – S9 — Økt-kort & nøkkelmetrikker (📊)

Status: Ferdig
Leveranser:
SessionCard viser NP, IF, VI, Pa:Hr, W/slag, CGS og PrecisionWatt-verdi.
Indoor/Outdoor-chip og Kalibrert-status i UI med ryddigere navigasjon.
Kort-økt (<30 samples) gir kontrollert beskjed; HR-only fallback støttes uten crash.
MockSession oppdatert (outdoor/indoor-varianter); konsistent rendering.
DoD: Nøkkelmetrikker vises korrekt i UI; kort-økt og HR-only håndteres uten crash; prod-build verifisert; tester grønne.

✅ FERDIG – S10 — Live API-integrasjon (🌐)

Oppgaver (levert):
api.ts med timeout/abort + schema-guard (+ simulateInvalid dev-switch).
sessionStore med kildevalg (api/mock), identisk state-shape og robust feilflyt.
ErrorBanner + “Prøv igjen” i SessionView; uendret layout for mock/live.
.env.example (VITE_BACKEND_URL).
Vitest for ErrorBanner/SessionView/store; jsdom-oppsett.

DoD (bestått):
Live-økt hentes og rendres uten crash.
Mock-data fortsatt brukbare i dev.
Feiltilstander (offline/timeout/404/500) → banner + retry.
Prod/dev viser identisk layout.
Typecheck/build/test grønt.

Funn (A/B/C):

A (DoD): 404 → “Ingen data å vise”; 500/timeout → generisk feil. Schema-guard fail-closed.

B (Frontlog): Rebuild-script for Rust-kjerne; CI-steg for maturin + cache; doc for venv/VSCode-interpreter.

C (Observasjon): Pytest feilet pga. tolkermismatch (conda ↔ system). Lås til prosjekt-venv og unngå ../src/...-imports i src/*.

✅ FERDIG – S11 — Analysepanel & trender (📈)

Oppgaver (fullført):

AnalysisPanel med status-badges (FULL, HR-only, LIMITED).

AnalysisChart med CI-bånd (PrecisionWatt), tooltip og NP/PW-trend.

Edge-case-håndtering (kort økt, kalibrert =false, tomme data).

Tooltip viser Kilde og Kalibrert.

CI-bånd vises/skjules (kontrollert; test midlertidig skip’et men patch klar).

Tester for hover, fallback og smoke; ytelse testet (1 Hz / 2 t).

Prod/dev layout verifisert identisk.

Lint + type-check + build/test grønt.

DoD (bestått):
Analysepanel gir innsikt og er robust.
Trendgraf fungerer med edge-case-data.
CI-bånd og tooltip interaktive og korrekte.
Feiltilstander gir fallback og banner.
Prod og dev identisk ytelse.
Type-sikkerhet 100 %.

Funn (A/B/C):

A (DoD): Legg til visuell indikator ved kalibrert =false (i tooltip/legend).

B (Frontlog): Opprett egen TrendsChart for aggregert NP/PW over flere økter (videresatt til S12).

C (Observasjon): Test for CI-bånd skip’et i CI → patch planlagt i S12.

🔜 PLANLAGT – S12 — Brukeropplevelse & kalibreringsguide (🎨🧭)

Oppgaver:
Onboarding for første outdoor-økt; stegvis kalibreringsmodal.
Info for brukere uten wattmåler (HR-fallback, tydelig språk).
Rydd labels; skille Mode (Indoor/Outdoor) vs. Kilde (API/Mock).
Knytte til schema-felter (calibrated, cda, crr, reason).
Ny fra S11: TrendsChart for aggregert NP/PW → inkluderes i UI-oversikt.
[ny prosessforbedring] Legg inn fast bygg- og import-sjekk før push:
python -m maturin develop --release -F python --manifest-path core/Cargo.toml && python -c "import cyclegraph_core"
slik at cyclegraph_core alltid kompileres og importeres korrekt før pytest/CI kjører.

DoD (presisert):
“Ferdig kalibrert” trigger backend-flag og speiles i UI.
HR-only-flyt forståelig uten tekniske termer.
TrendsChart viser NP/PW per økt uten lagg.
Enhetstester på nye UI-komponenter; samme feilbanner-mønster ved svikt.
Bygg- og import-sjekk for cyclegraph_core må kjøre grønt før merge.

🔜 PLANLAGT – S13 — QA, demo & CI readiness (🚀✅)

Oppgaver (oppdatert):
Prod-build optimering; a11y (kontraster/tastatur).
Docs: README + Using Precision Watt.
Deploy til testmiljø (Netlify/Vercel).

GitHub Actions:
Sett opp Rust toolchain (MSVC) + maturin.
Bygg wheel/cache; kjør pytest (CLI) + vitest (FE) + schema-kontrakt.
Logging-test i CI (stdout ren JSON, stderr debug).

[ny QA-sjekk] CI validerer at cyclegraph_core kan importeres og at pytest-scope = 52 tester (ingen “missing core”-feil).
Miljøhensyn: Unngå npm ci i OneDrive; bruk npm install eller flytt prosjektmappe.

DoD (oppdatert):
Lighthouse perf > 80 / a11y > 90.
CI grønn inkl. maturin-steg + schema-kontrakt.
Import-sjekk for cyclegraph_core og pytest-scope består automatisk i CI.
Logging-test passerer; deploy kjørbar i testmiljø.
Ingen blocker-bugs ved demo.

🔜 PLANLAGT – S14 — Precision Watt End-to-End Integration (⚡🚴‍♂️)

Mål:
Gjør Precision Watt til et fullverdig, brukerstyrt feature i CycleGraph – fra beregning til lagring og publisering på Strava. Dette markerer den funksjonelle fullføringen av flaggskipelementet før MVP-lansering.
Viktig når brukere lagrer sine økter på strava skal allt gå automatisk gjennom Pipelinen til appen så lenge bruker har godkjent og gitt samtykke. 
Oppgaver:
Backend (Rust/Python):
Utvid analyze_session() slik at precision_watt, precision_watt_ci, cda, crr, reason lagres i brukerens historikk (JSON eller SQLite).
Ny modul publish_precision_watt.py som bruker Strava-token og publiserer kommentar med:
CycleGraph Precision Watt: {pw:.0f} W (±{ci:.0f} W)
Vind: {wind} m/s, CdA: {cda:.2f}, Crr: {crr:.3f}

Rebruk strava_publish.py, legg til mal for Precision Watt og rate-limit-håndtering (429 → retry m/backoff).
Legg til CLI-flagg --publish-pw og miljøvariabel CYCLEGRAPH_PUBLISH_PW=true.
Logg eventer for pw_publish_success_total og pw_publish_fail_total.

Frontend (React):
Ny toggle i brukerprofil-panelet: “Publisér Precision Watt til Strava”.
Oppdater SessionCard / AnalysisPanel – viser ikon + status “Publisert”.
Banner ved førstegangspublisering: “Precision Watt publisert på Strava ✅”.

Lagring / Observabilitet:
Utvid session_storage.py til å persistere feltene precision_watt, precision_watt_ci, published_to_strava, publish_time.
Ny CLI-kommando cyclegraph sessions list som viser siste 5 økter m/ PW og status.

Testing / CI:
Unit-tester for publish_precision_watt() med mock-Strava-klient.
End-to-end-test som simulerer Strava-respons og verifiserer kommentarinnhold.
Oppdater schema_version → v0.7.2 med nye felt (published_to_strava, publish_time).
CI kjører pytest test_publish_pw.py + vitest smoke på ny toggle.
[prosedyresjekk] CI validerer at cyclegraph_core bygger og importeres før tests – samme rutine som fra S12/S13.

DoD (presisert):
Precision Watt-felt lagres og lastes riktig i historikk.
Strava-publisering gjennomføres automatisk ved aktivert toggle.
Statusbanner og ikon vises konsistent i UI.
Schema v0.7.2 validerer nye felt uten brudd på bakoverkompabilitet.
Unit + E2E-tester består (inkl. mock-Strava).
CI grønn med maturin-build og import-sjekk for cyclegraph_cor
