Definition of Done — Frontlog

Samlet oversikt over hva som er ferdig, påbegynt og planlagt. Ikke-sensitive, høynivå punkter.
Sist oppdatert: 2025-09-25

✅ FERDIG
M1 — Prosjektstruktur & repo
Standard repo-oppsett: core/, cli/, docs/, data/, shapes/, tests/.
Init GitHub-repo (README, lisens, .gitignore).
Bygg/kjørbare grunnkommandoer dokumentert i README (Rust/Python).
CI eller lokal “quick check”: cargo check og enkel Python-kall fungerer.

M2 — Rust-core med PyO3
Cargo.toml satt opp med PyO3 av riktig versjon.
Minst én eksponert Rust-funksjon bundet til Python (importerbar i Python).
cargo test (grunnleggende) og “import i Python” fungerer lokalt.
Kodekommentarer: hvor core-API lever og hvordan bygge.

M3 — CLI-oppsett & dataflyt
cli/analyze.py kjører ende-til-ende mot core (Rust) med argparse-flagg.
I/O-kontrakt: leser CSV/streams, skriver rapport/JSON til output/.
Grunnleggende feilhåndtering (fil mangler, feil format) med tydelige feilmeldinger.
“Happy path” demonstrert på sample data.

M4 — Dummydata & testkjøring
Dummy/samples tilgjengelig i repo (ikke sensitive).
Kjøreeksempel dokumentert: python -m cli.analyze … produserer forutsigbar rapport.
Sanity-sjekk: verdier i rapport er konsistente og uten exceptions.
Enkle tester/skript verifiserer flyten.

M5 — SHACL-validering
SHACL-shapes for RDF definert i shapes/.
Valideringsscript i Python: kjørbar via CLI-flag eller separat kommando.
Eksempelfiler validerer OK; feil rapporteres forståelig.
Kort bruksdokumentasjon i docs/ (hva, hvordan, hvor output havner).

M6 — Strava-integrasjon (API & import)
OAuth-flyt verifisert; tokens lagres sikkert lokalt (ingen hemmeligheter i repo).
Henting av aktiviteter med paging og tidsfilter (--since) fungerer.
Streams → CSV (minst time,hr,watts), robust håndtering av 401/403/429/5xx.
Inkrementell state (ingen duplikater), og grunnlogg over kjøringer.
End-to-end “import → analyze” fungerer på ≥3 reelle økter (lokalt verifisert).

M7 — Analysefunksjoner (effektivitet, treningsscore)
CGS v1 etablert: IF/NP/VI/Pa:Hr/WpB + 28d baseline (±25 %), tydelige fallbacks.
Badges: Big Engine (+6 %, ≥30 min) og Metronome (VI≤1.05, Pa:Hr≤1.05).
Python: Strava publish-formatter m/ språk, trimming og fallbacks + tester grønne.
Rust: unit + golden + perf-guard (2h@1Hz ≤200 ms) grønne.
Strava-klient: auto-refresh, header-fix, comment→description-fallback, verifisert live.
Docs: CGS_v1, CLI usage, Strava publish oppdatert.

M7.5 — Backend-forfining (CGS v1.1, explain)
Systemtest grønn på steg 0–7: PyO3-import, CLI-hjelp, E2E med sample, idempotens, feilhåndtering, Rust/golden, perf-smoke (~0.73s).
SHACL- og Strava-mock-test kan hoppes når ingen .ttl eller mock-data er tilgjengelig.
Fikser gjort: ryddet cmd_session, fikset continue-feil, lagt til mod metrics; i lib.rs (løste E0432), output verifisert deterministisk.

M7.5 — Forebyggende tester
Pytest: _analyze_session_bridge() kaster ValueError ved tomme arrays.
Rust golden-test for w_per_beat() med edge-case input (NaN/null/mismatch).
Branch: feature/m7.5-preventive-tests
Tester grønne: pytest + cargo test (inkl. golden).
Observasjoner: w_per_beat() håndterer NaN/mismatch robust; logging/Result kan vurderes senere.

M7.5 — GitHub Actions (basic CI)
Minimal workflow satt opp: kjører pytest -q og cargo test --tests -q på push/PR.
Branch: feature/m7.5-ci-basic
Tester grønne: workflow verifisert OK på GitHub.
Observasjon: base klar for utvidelse med systemtest senere.

M7.6 — Strava Fetch & Modusdeteksjon (S1)
Auto-modus basert på trainer, sport_type og device_watts.
CLI-flag --mode roller|outdoor som overstyrer auto.
JSON-output rutes til riktig pipeline (indoor/outdoor).
Tester: pytest + cargo test grønne (CLI-parsing, efficiency calc, JSON).
Observasjoner: enkelte Strava-økter uten watt (device_watts=False) → policy må avklares.
Branch: feature/strava-fetch-mode

M7.6B — No-watt policy & fallback (S1B)
Backend: rute økter uten watt eller device_watts=False til hr_only pipeline.
Frontend (senere i M8): vise varsel “Ingen effekt-data registrert – enkelte metrikker begrenset.”
Logging: structured WARN med no_power_reason.
Observability: metrics sessions_no_power_total, sessions_device_watts_false_total.
Tester: pytest fixture for device_watts=False og Rust analyzer test (ingen panic, JSON mode="hr_only").
Varsel vises i publish (dry-run).
Branch: feature/no-watt-policy

S2 — Vær & profiler (🌤️)
Værklient (vind/temp/trykk) med caching per (lat,lon,timestamp).
Profilsettings (total vekt, sykkeltype, Crr-preset) + validering/defaults (estimat=true).
CLI integrasjon: justert effektivitet basert på værkontekst.
DoD: ≥95 % cache-hit ved rekjøring; sanity-test hoppes over når publiseringsflyt ikke berøres.
Status: ✅ Ferdig (pytest + cargo grønne, stabile tall ±1–2 W).

S3 — Fysikkmotor (🚴)
Kraftmodell: gravitasjon, rulling (Crr), aero (CdA), akselerasjon + drivverkstap.
Høyde-smoothing i egen modul + outlier-kutt (stopp/sving).
Sample-watt + 5 s glatting + NP/avg i CLI.
DoD: Golden test i CI (±1–2 W; NP/avg ±1 W) oppnådd; pytest/cargo grønn; deterministisk output.
Status: ✅ Ferdig

S4 — Kalibrering (CdA/Crr-fit) (🎯)
Kalibreringsprosedyre (5–8 min, 3–6 % bakke). Fit CdA/Crr fra data (uten powermeter).
Lagre pr sykkel/profil; bruk globalt i beregninger.
DoD: Reproducible fit på testdata; MAE ≤10 % mot powermeter på kalibreringssegment; flagg “Kalibrert: Ja/Nei”.
Status: ✅ Ferdig

S5 — Indoor pipeline + GPS/Wind integrasjon (🧪)

Indoor/outdoor-pipeline koblet til fysikkmotor m/ vindkorrigering.
CLI-output: watts, wind_rel, v_rel, calibrated, status.
Bonus: Eksponert backend-API for frontend — cli/session_api.py: analyze_session() (+ tests/test_api.py), deterministisk JSON for enkel integrasjon i M8.
Golden test med syntetisk GPS+vindfelt etablert.
Unicode-bug i CLI løst.
Tester: ✅ cargo/pytest grønne, output stabil ±1–2W.

Status: ✅ Ferdig
🔧 Dynamisk DoD (må alltid være oppfylt)
Robust CLI: Alle subcommands (session, efficiency) kjører uten runtime-feil på gyldige inputfiler.
Profiler: profile.json lagres/lastes; felt calibrated, cda, crr, calibration_mae oppdateres ved kalibrering.

Kalibrering:
MAE ≤ 10 % på kalibreringssegment mot powermeter.
Output markerer calibrated: Ja/Nei + reason (nulles ut ved suksess).
Fysikk: Bruker physics-output som baseline (NP/avg, smoothing).
Determinisme: Samme input gir samme output (±1–2 W).
Tester: cargo test + pytest må være grønne i CI.
Observabilitet: CLI og API viser nøkkelfelter (effektivitet, NP, IF, VI, Pa:Hr, W/beat, kalibrering).
Integrasjon: Rust-kjerne eksponert til Python via PyO3 (analyze_session, rust_calibrate_session).

Nytt (A): Konsistensregler i output
Hvis calibrated=True → reason=None.
Når GPS/vind brukes → mode="outdoor".
status avledes fra HR når mulig (ellers behold LIMITED).


S6 — CLI/Reports & observabilitet (📈)
Rapportfelt: NP, Avg, VI, Pa:Hr, W/beat, PrecisionWatt ±usikkerhet.
Strukturerte logger (level, tidsbruk, cache hits).

Metrics for no-watt (sessions_no_power_total).
Generere rapporter (CSV/JSON) med trender.
Historikk over kalibrering og WPB baseline.
Docs: “How it works” + “Known limits”.
DoD: deterministisk rapport; loggnivå styrbart via flagg/env.

S7 — QA & hardening (🛡️)
Edge-cases: manglende vær, GPS-drift, null HR, kort økt.
Flere golden-tester med variasjon i vær/terreng.
Golden på ekte ride uten powermeter + plausibilitet mot HR/trend.
Oppdatér CGS v1.1-kobling.
Nytt (B): Refaktorér testoppsett (conftest.py, test_utils.py) for mindre mocking-knot.
DoD: alle tester grønne; CGS konsumerer nye felter uten regress.




S8 — Scaffold & dataadapter (🧩)

React/Tailwind scaffold, routing, state.
Bruk eksisterende Python-API analyze_session() som backend-adapter (forenkler integrasjon).
Nytt: sørge for at frontend alltid forventer schema_version i output og håndterer HR-only fallback.

DoD:
Viser én økt (mock) i UI; bytte mock→live via .env.
JSON-output fra backend valideres mot schema_version.
HR-only fallback vises uten crash i UI.


S8.5 — Mini-sprint: Precision Watt stubs + short-session guard (🧩)
Status: ✅ Ferdig

Oppgaver
Utvidet SessionReport med: precision_watt, precision_watt_ci, sources, cda, crr, reason (nullable).
Oppdatert mockSession med dummy-serier (40 samples).
Dev-sanity i SessionView (kun DEV): teller PW/CI samples.
Short-session guard (<30 samples): kontrollert melding, ingen crash.

DoD
App bygger grønt med nye felter.
Dev-sanity synlig i DEV.
Kort-økt gir kontrollert beskjed.

S9 — Økt-kort & nøkkelmetrikker (📊)
SessionCard viser NP, IF, VI, Pa:Hr, W/slag, CGS og PrecisionWatt-verdi.
Indoor/Outdoor-chip og Kalibrert-status i UI; ryddigere navigasjon.
Short-session guard (<30 samples) med kontrollert melding; HR-only fallback støttes uten crash.
MockSession oppdatert (outdoor/indoor-varianter); konsistent rendering.
DoD: Nøkkelmetrikker vises korrekt i UI, kort-økt og HR-only håndteres uten crash, prod-build verifisert, tester grønne.

🔁 Dynamisk DoD & Frontlog (oppdatert etter S11)
✅ FERDIG – S9 — Økt-kort & nøkkelmetrikker (📊)

Status: Ferdig
Leveranser:
SessionCard viser NP, IF, VI, Pa:Hr, W/slag, CGS og PrecisionWatt-verdi.
Indoor/Outdoor-chip og Kalibrert-status i UI med ryddigere navigasjon.
Kort-økt (<30 samples) gir kontrollert beskjed; HR-only fallback støttes uten crash.
MockSession oppdatert (outdoor/indoor-varianter); konsistent rendering.
DoD: Nøkkelmetrikker vises korrekt i UI; kort-økt og HR-only håndteres uten crash; prod-build verifisert; tester grønne.

✅ FERDIG – S10 — Live API-integrasjon (🌐)

Oppgaver (levert):
api.ts med timeout/abort + schema-guard (+ simulateInvalid dev-switch).
sessionStore med kildevalg (api/mock), identisk state-shape og robust feilflyt.
ErrorBanner + “Prøv igjen” i SessionView; uendret layout for mock/live.
.env.example (VITE_BACKEND_URL).
Vitest for ErrorBanner/SessionView/store; jsdom-oppsett.

DoD (bestått):
Live-økt hentes og rendres uten crash.
Mock-data fortsatt brukbare i dev.
Feiltilstander (offline/timeout/404/500) → banner + retry.
Prod/dev viser identisk layout.
Typecheck/build/test grønt.

Funn (A/B/C):

A (DoD): 404 → “Ingen data å vise”; 500/timeout → generisk feil. Schema-guard fail-closed.

B (Frontlog): Rebuild-script for Rust-kjerne; CI-steg for maturin + cache; doc for venv/VSCode-interpreter.

C (Observasjon): Pytest feilet pga. tolkermismatch (conda ↔ system). Lås til prosjekt-venv og unngå ../src/...-imports i src/*.

✅ FERDIG – S11 — Analysepanel & trender (📈)
Oppgaver (fullført):
AnalysisPanel med status-badges (FULL, HR-only, LIMITED).
AnalysisChart med CI-bånd (PrecisionWatt), tooltip og NP/PW-trend.
Edge-case-håndtering (kort økt, kalibrert =false, tomme data).
Tooltip viser Kilde og Kalibrert.
CI-bånd vises/skjules (kontrollert; test midlertidig skip’et men patch klar).
Tester for hover, fallback og smoke; ytelse testet (1 Hz / 2 t).
Prod/dev layout verifisert identisk.
Lint + type-check + build/test grønt.

DoD (bestått):
Analysepanel gir innsikt og er robust.
Trendgraf fungerer med edge-case-data.
CI-bånd og tooltip interaktive og korrekte.
Feiltilstander gir fallback og banner.
Prod og dev identisk ytelse.
Type-sikkerhet 100 %.
Funn (A/B/C):
A (DoD): Legg til visuell indikator ved kalibrert =false (i tooltip/legend).
B (Frontlog): Opprett egen TrendsChart for aggregert NP/PW over flere økter (videresatt til S12).
C (Observasjon): Test for CI-bånd skip’et i CI → patch planlagt i S12.

🔜 PLANLAGT – S12 — Brukeropplevelse & kalibreringsguide (🎨🧭)

Oppgaver:
Onboarding for første outdoor-økt; stegvis kalibreringsmodal.
Info for brukere uten wattmåler (HR-fallback, tydelig språk).
Rydd labels; skille Mode (Indoor/Outdoor) vs. Kilde (API/Mock).
Knytte til schema-felter (calibrated, cda, crr, reason).
Ny fra S11: TrendsChart for aggregert NP/PW → inkluderes i UI-oversikt.
[ny prosessforbedring] Legg inn fast bygg- og import-sjekk før push:
python -m maturin develop --release -F python --manifest-path core/Cargo.toml && python -c "import cyclegraph_core"
slik at cyclegraph_core alltid kompileres og importeres korrekt før pytest/CI kjører.

DoD (presisert):
“Ferdig kalibrert” trigger backend-flag og speiles i UI.
HR-only-flyt forståelig uten tekniske termer.
TrendsChart viser NP/PW per økt uten lagg.
Enhetstester på nye UI-komponenter; samme feilbanner-mønster ved svikt.
Bygg- og import-sjekk for cyclegraph_core må kjøre grønt før merge.

🔜 S13 — QA, Polish, CI & Definition of Truth (🚀✅)
Mål
Kvalitetssikre hele kjeden, etablere Definition of Truth, innføre schema-kontrakter og første live-kobling av TrendsChart.
Oppgaver
Kvalitet / QA
Tilgjengelighet (a11y: kontraster, tastaturnavigasjon).
Verifiser kalibrerings-flow fra S12 i Lighthouse (UX > 80).
Sanity-test kjøres kun ved publisering.
Miljøhensyn: unngå npm ci i OneDrive → bruk npm install eller flytt mappe.
QA-sjekk: CI validerer at cyclegraph_core kan importeres, og at pytest kjører 52 tester.
CI / Testing

GitHub Actions: Rust toolchain (MSVC) + maturin build.
Kjør: pytest (CLI), vitest (FE), schema-kontrakter.
Logging-test i CI: stdout = ren JSON, stderr = debug/log.
Kontrakttest for /api/trends mot trends_response.v1.json.
Definition of Truth
docs/definition-of-truth.md:

Kilde → avledet → rull-up: sessions → session_metrics → daily_user_metrics.
Begreper: w_per_beat, pw_efficiency, HR-fallback.
Tid/lagring: UTC som sannhet; presentasjon kan mappe til Europe/Oslo ved behov.
Versjonering: schema_version = 0.7.x.
JSON-schemaer:
schema/session_metrics.v1.json
schema/daily_user_metrics.v1.json
schema/trends_response.v1.json
Lett validator i CI (ajv/TS).
Trend Analysis (minimal patch)
Backend: /api/trends?from&to&bucket=day (les fra daily_user_metrics, eller tom struktur hvis ingen data).
Frontend: mock → live bak feature-toggle VITE_USE_LIVE_TRENDS=true.
“Ingen data ennå”-state + robust AbortError-håndtering.
Docs: nytt avsnitt om TrendsChart i Using Precision Watt.

DoD
Lighthouse: Perf > 80, a11y > 90.
CI grønn inkl. maturin + schema-kontrakter + logging-test.
/api/trends returnerer 200 med korrekt struktur (også tom respons).
pytest + cargo + vitest består; cyclegraph_core import-sjekk OK (52 tester).
Prod-build stabil; ingen manuelle rebuild-steg.

Estimat
QA/Lighthouse/a11y: 2–3 t
CI/schema-validering: 2–3 t
DoT + docs: 2 t
Trend-patch (BE+FE): 2–4 t
Sum: 8–12 t

🔜 S13 — QA, Polish, CI & Definition of Truth (🚀✅)
Status: ✅ Ferdig
🎯 Mål
Kvalitetssikre hele kjeden, etablere Definition of Truth, innføre schema-kontrakter og første live-kobling av TrendsChart.
🧪 Oppgaver

Kvalitet / QA
✅ Tilgjengelighet (a11y: kontraster, tastaturnavigasjon) verifisert.
✅ Kalibrerings-flow fra S12 testet i Lighthouse (UX-score: Performance 74 ⚠️, Accessibility 90 ✅, Best Practices 100 ✅, SEO 82 ✅).
✅ Sanity-test utført ved publisering.
✅ Miljøhåndtering OK – npm install brukt, ikke npm ci i OneDrive.
✅ QA-sjekk bekrefter at cyclegraph_core kan importeres og at pytest kjører alle 52 tester.
CI / Testing

✅ GitHub Actions kjører Rust toolchain (MSVC) + maturin build.
✅ pytest, cargo test og vitest fullført grønt.
✅ Schema-kontrakter valideres via ajv-cli.
✅ Logging-test i CI gir ren JSON til stdout og debug til stderr.
✅ Kontrakttest for /api/trends mot trends_response.v1.json fungerer korrekt.
Definition of Truth

✅ docs/definition-of-truth.md etablert:
Datakjede: sessions → session_metrics → daily_user_metrics.
Begreper definert: w_per_beat, pw_efficiency, HR-fallback.
Tid/lagring: UTC som sannhet, lokal mapping til Europe/Oslo.
Versjonering: schema_version = 0.7.x.

✅ JSON-schemaer:
schema/session_metrics.v1.json
schema/daily_user_metrics.v1.json
schema/trends_response.v1.json
✅ Lett validator i CI (ajv/TypeScript).

Trend Analysis (minimal patch)

✅ Backend: /api/trends?from&to&bucket=day leser fra daily_user_metrics og returnerer tom struktur hvis ingen data.
✅ Frontend: mock → live bak feature-toggle VITE_USE_LIVE_TRENDS=true.
✅ “Ingen data ennå”-state og robust AbortError-håndtering implementert.
✅ Dokumentasjon oppdatert med nytt avsnitt om TrendsChart i Using Precision Watt.
✅ DoD-verifikasjon
Kriterium	Resultat
Lighthouse	Performance 74 ⚠️, Accessibility 90 ✅, Best Practices 100 ✅, SEO 82 ✅
CI (maturin + schema + logging)	✅ Grønn
/api/trends struktur	✅ 200 + gyldig respons (inkl. tom)
pytest + cargo + vitest	✅ Alle tester passert (52 totalt)
Prod-build	✅ Stabil uten manuelle rebuilds
⏱️ Estimat (faktisk brukt)
QA/Lighthouse/a11y: ~3 t
CI/schema-validering: ~3 t
DoT + docs: ~2 t
Trend-patch (BE + FE): ~3 t
Sum: ≈ 11 t

🆕 Dynamisk DoD – Sprint 14: Precision Watt E2E + Bike Setup
Mål

Fullføre Precision Watt som brukerstyrt feature fra beregning → lagring → (valgfri) Strava-publisering, med Bike Setup (type, vekt, dekk, kvalitet) og brukerprofil/kalibrering.
PW skal beregnes automatisk etter hver importert/lagret økt og lagres i historikk.
Bruker kan rekalibrere når som helst.
Live API støtter økter opptil 4 timer.

Omfang (leveranser)
Backend (Rust/Python)
analyze_session() utvides: persisterer precision_watt, precision_watt_ci, cda, crr, reason + Bike-felter + profilfelter brukt i beregning.
Værimport: ved analyse av økt hentes sanntids værdata (vindstyrke, vindretning, temperatur, trykk, lufttetthet) via vær-API.
GPS-kobling: hvert sekund i økten kobles GPS-heading mot vindretning for å beregne relativ vindvinkel og faktisk motvind/medvind som inngår i Precision Watt-formelen.
Crr-estimering fra sykkeltype, dekkbredde og dekk-kategori (Trening / Vanlig / Ritt) med vektet formel og avrunding.
Total masse = ryttervekt + sykkelvekt i PW-beregning.
Automatisk trigger etter import/lagring: Import → Analyze → Persist PW → (toggle aktiv) sett publish_state="pending".
Publiserings-orchestrering (idempotent) med retry/backoff (429) og statusflagg.
Live API: analyse og UI håndterer økter ≤ 4 timer.
Frontend (React)
Bike Setup i kalibreringsmodal (dropdowns + auto-defaults pr sykkeltype).
Kalibrerings/onboarding: nye brukere promptes til kalibrering som standard; rekalibrering tilgjengelig i profil når som helst.
Profil: rytter-egenvekt, Bike-navn (valgfritt), samtykke til databruk (påkrevd) m/tidsstempel og versjon.
Toggle: “Publisér Precision Watt til Strava”.
Visning: “PW beregnet ✓”, “Publisert på Strava ✓” / feilbanner; vis Crr brukt.
Lagring / Observabilitet
session_storage.py / persist: alle PW- og Bike-felter + publiseringsstatus + publish_time / publish_hash.
CLI: cyclegraph sessions list (siste 5 økter med PW/publish-status).
Metrikker: pw_publish_success_total, pw_publish_fail_total.
UX / Produktkrav (Bike Setup & Kalibrering)
Sykkeltype (dropdown): Road (default) / Gravel / Hybrid.
Sykkelvekt (kg) (dropdown, heltall):
Road 7–11 (default 9) | Gravel 9–13 (default 11) | Hybrid 11–16 (default 13)
Dekkbredde (mm) (dropdown):
Road 25–32 (default 28) | Gravel 35–45 (default 40) | Hybrid 40–50 (default 45)

Dekk-kategori (enkelt forklart dropdown):
🟢 Trening – slitesterke, litt tregere (+10 % Crr)
⚪ Vanlig / Performance – balanse mellom fart og komfort (default)
🏁 Ritt / Race – glatte konkurransedekk, lav rullemotstand (–7 %)
Crr brukt: beregnes automatisk (vises read-only i UI) med tekst “Lav / Middels / Høy rullemotstand”.
Profil / kalibrering
Nye brukere: obligatorisk prompt for kalibrering/profil ved første innlogging/import.
Rekalibrering når som helst via profilpanelet.
Felter: rider_weight_kg (påkrevd), bike_type, bike_weight_kg, tire_width_mm, tire_quality, bike_name (valgfritt), consent_accepted, consent_version, consent_time.
Default-logikk
Bytte sykkeltype oppdaterer default-områder for vekt/dekk.
Endringer forhåndsvises med live oppdatert “Crr brukt”.
Strava-publisering
Toggle i profil: “Publisér Precision Watt til Strava”.
Første vellykkede publisering: grønt statusbanner.
Tekniske regler
Crr-baseline pr type: Road ≈ 0.0042, Gravel ≈ 0.0062, Hybrid ≈ 0.0068.
Bredde-faktor: (28 / tire_width)^0.3
Kvalitet-faktor: Trening 1.10, Performance 1.00, Race 0.93.
Avrunding: 5 desimaler ved lagring i metrics.
Idempotens-publisering: publish_hash = sha256(activity_id + pw + ci) → hopp over hvis identisk hash finnes.
Publiseringsstatus: publish_state ∈ {none, pending, done, failed}.
Feiltoleranse: 429 → eksponentiell backoff + WARN publish_retry; 401/403 (token) → failed + UI-banner “Koble Strava på nytt”.
Live API varighet: UI/BE håndterer sesjoner opptil 4 timer @ 1 Hz uten jank; abort/timeout-guards på plass.
Schema-bump (v0.7.3)
Nye/utvidede felter i session_metrics og/eller profil: bike_type, bike_weight, tire_width, tire_quality, crr_used, rider_weight, bike_name, precision_watt, precision_watt_ci, publish_state, publish_hash, published_to_strava, publish_time, consent_accepted, consent_version, consent_time.
Bakoverkompatibilitet: nye felter er additive; schema-validator aksepterer eldre data.
Definition of Done (sjekkliste)
Backend

✅ analyze_session() persisterer PW + CI + CdA/Crr/Reason og Bike/Profil-felter som brukt i beregning.
✅ Henter sanntids værdata (vind, retning, temperatur, trykk) for hver økt.
✅ Kobler GPS-heading mot vindretning for relativ vindvinkel og faktisk motvind/medvind i PW-formelen.
✅ Automatisk trigger etter import/lagring beregner PW og lagrer uten manuell inngripen.
✅ Publiserings-orchestrering → pending → done/failed (idempotent via hash).
✅ Retry/backoff for 429; 401/403 setter failed og gir feilkode.
✅ Live API støtter økter ≤ 4 timer.
✅ CLI viser siste 5 økter med precision_watt, publish_state, publish_time.

Frontend / UX

✅ Onboarding prompt for kalibrering (kan utsettes, men krever samtykke).
✅ Profil & rekalibrering når som helst.
✅ Bike Setup dropdowns + live forhåndsvisning av Crr brukt.
✅ Dekk-kategori forklart (Trening / Vanlig / Ritt) med ikon og tooltip.
✅ PW-status etter import + Strava-publisering.
✅ Strava-toggle lagres persist.
✅ Tilgjengelighet (a11y): labels, fokus, tastatur.

Lagring / Observabilitet

✅ Persist av alle nye felter.
✅ Metrikker økes korrekt.
✅ Strukturerte logger for import → analyze → persist → publish med varighet og resultat.

Testing / CI

✅ Unit: estimate_crr(), vær-håndtering, publiseringsmodul (mock-Strava), idempotens.
✅ E2E: importert Strava-økt → PW lagres automatisk og publiseres ved toggle.
✅ Schema v0.7.3 validerer.
✅ Ytelse: 4-timers datasett @ 1 Hz består.
✅ CI grønn (maturin + pytest + cargo + vitest).

Dokumentasjon

✅ Brukerdoc: Kalibrering & Bike Setup, Rekalibrering, Strava-publisering, værdata og vindmodell.
✅ Dev-doc: Crr-formel, weather/GPS-integrasjon, schemafelt, publish-flow, ytelsesnotater.
✅ Samtykke-tekst og lagring beskrevet.

Ikke med (kan vurderes senere)

Strava webhooks (for automatisk event-trigger).

Merke-spesifikke dekkdatabaser (for omfattende til MVP).

Estimat (uendret)

Backend (persist + publish + værdata): 6–8 t
Frontend (toggle + Bike Setup + status): 3–5 t
Testing/CI: 3–4 t
Docs & polish: 2 t
Sum: 15–19 t

Resultat ved “grønn DoD”

Nye brukere kalibreres (prompt) og avgir samtykke.

Økter opptil 4 timer importeres → PW beregnes og lagres automatisk med vær- og vinddata per sekund.

(Valgfritt) publisering til Strava skjer automatisk når togglen er aktivert, idempotent og robust.

Bike Setup-feltene er enkle, forståelige og realistiske (Trening / Vanlig / Ritt).

✅ Oppsummering
Sprint	Fokus	Estimat
S13	QA + CI + Definition of Truth + Trend-patch	8–12 t
S14	Precision Watt E2E + Bike Setup (Crr fra type/dekk/vekt)	15–19 t
S15	Minisprint – i18n NO/EN + migrering til cyclegraph.app	5–8 t

Låst plan. Når du committer denne frontlogen:

git add .
git commit -m "Lock S13–S15 frontlog: DoT, trends, PW E2E + Bike Setup, i18n migration"
git push